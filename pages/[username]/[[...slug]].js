import {useEffect} from 'react';
import { useWeb3React } from "@web3-react/core";
import { useRouter } from "next/router";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import {
  Tooltip,
} from 'react-tippy';

import { truncate_address, getAccount } from "/utils/helper";
import { appItems } from "/utils/common";
import {getLocalURL} from "utils/urls";

import styles from "/styles/Profile.module.scss";
import AppLayout from "components/layout/AppLayout";
import { get, isEmpty } from "lodash";

export default function Profile(props) {
  const { account, viewer } = props;
  const router = useRouter();
  const { slug } = router.query;

  useEffect(() => {
    if (isEmpty(slug)) {
      router.push(`/${account.username}/general`);
    }
  }, []);

    const menuItems = [
      {
          name: 'General',
          href: `/${account.username}/general`,
          icon: 'schedule',
      }, {
        name: 'Partners',
        href: `/${account.username}/partners`,
        icon: 'handshake',
      }, {
          name: 'Members',
          href: `/${account.username}/members`,
          icon: 'group',
      }, {
          name: 'Updates',
          href: `/${account.username}/updates`,
          icon: 'history',
      }];

  const renderUsername = () =>
    account.username ? (
      <div className={styles.user_name}>@{account.username}</div>
    ) : (
      <div className={styles.user_name}>{truncate_address(account.wallet)}</div>
    );

  const renderAction = (isViewer) => {
    return isViewer ? (
      <div className={styles.editProfile}>
        <Link href={`/settings`}>
            <a className={styles.secondaryButton}>
                <i className="material-symbols-outlined">settings</i>
                Edit Profile
            </a>
        </Link>
      </div>
    ) : (
      <div className={styles.partnerProfile}>
        <Link href="/">
          <a className={styles.primaryButton}>Request Partnership</a>
        </Link>
        <Link href="/">
          <a className={styles.primaryButton}>Message</a>
        </Link>
      </div>
    );
  };

  return (
      <>
        <Head>
            <title>
            CarePack: Partner and Transact with businesses securely on the
            Blockchain.
            </title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <AppLayout
            account={account}
            slug={slug}
            apps={appItems}
            menu={menuItems}
            appName="Channels"
            appUrl={account.username}
        >
          <div className={styles.profile}>
            <div className={styles.account}>
                <div className={styles.media}>
                <div className={styles.image}></div>
                </div>
                <div className={styles.details}>
                  <div className={styles.actions}>
                      <div className={styles.nameHolder}>
                          <h1 className={styles.name}>{account.name || 'No Name'}</h1>
                          <div className={styles.verify}>
                              {account.isVerified && (
                                  <Tooltip
                                    title="Verified"
                                    position="top"
                                    trigger="mouseenter"
                                    distance={10}
                                    animation="shift"
                                    duration={200}
                                    size="big"
                                  >
                                    <Image
                                        src="/images/verify.png"
                                        alt="verify"
                                        height="20px"
                                        width="20px"
                                      />
                                  </Tooltip>
                              )}
                          </div>
                      </div>
                      {renderAction(viewer.username === account.username)}
                  </div>
                  <h2 className={styles.username}>{renderUsername()}</h2>
                  <div className={styles.community}>
                    <button className={styles.communityItem}>2,717 Members</button>
                  </div>
                  <p className={styles.description}>
                      {account.description || 'No description'}
                  </p>
                </div>
            </div>
            <div className={styles.content}>
              
            </div>
          </div>
        </AppLayout>
      </>
  );
};

export async function getServerSideProps(ctx) {
  const { username } = ctx.params;

  const viewer = await getAccount(ctx, true, true);

  const response = await fetch(`${getLocalURL()}/api/account`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ username }),
  });
  const data = await response.json();
  const account = get(data, "data", {});

  if( isEmpty(account) ) {
    return {
      notFound: true,
    }
  }

  return {
    props: {
      account,
      viewer: {...viewer?.props?.account},
    }
  };
}
